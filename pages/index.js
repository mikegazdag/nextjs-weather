import cn from 'classnames';
import { cities } from 'country-city-location';
import debounce from 'lodash/fp/debounce';
import Head from 'next/head';
import { useMemo } from 'react';

import { useApp } from '@/contexts/AppContext';
import { useCityQuery } from '@/hooks/useCityQuery';

export default function Home() {
  const { setQuery, weather, isLoading, setIsLoading } = useApp();
  const { getCity } = useCityQuery();

  const handleQuery = async event => {
    event.preventDefault;
    // const q = event?.target?.value;
    // console.log('event?.target?.value', q);
    // console.log('cities', cities);
    // const result = cities.filter(sourceCity => sourceCity.name === q);
    // console.log('results2', result);
    setIsLoading(true);
    setQuery(event?.target?.value);
    const response = await getCity({ city: event?.target?.value });

    console.log('response', response);
  };

  // eslint-disable-next-line react-hooks/exhaustive-deps
  const debouncedQuery = useMemo(() => debounce(300, handleQuery));

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <section>
        <header
          className={cn('bg-slate-800', {
            'h-screen items-center flex': !weather,
            'py-32': weather,
          })}
        >
          <div className="container">
            <h1 className="hs--h1 mb-2.5">Mike's Weather</h1>

            <div>
              <div className="form-control">
                <div className="input-group">
                  <input
                    type="text"
                    placeholder="Enter a city"
                    onChange={debouncedQuery}
                    disabled={isLoading}
                    className={cn('w-full max-w-xs input input-bordered', {
                      'input-disabled': isLoading,
                    })}
                  />
                  <button
                    className={cn('btn btn-square', {
                      loading: isLoading,
                    })}
                  >
                    {!isLoading && (
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="w-6 h-6"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth="2"
                          d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                        />
                      </svg>
                    )}
                  </button>
                </div>
              </div>
            </div>
            <p>
              <small>Powered by Weatherbit</small>
            </p>
          </div>
        </header>

        {weather && (
          <>
            <div className="container">
              <h2 className="hs--h2">Current Weather</h2>

              <p>City, location</p>
              <p>Current conditions</p>
              <p>Chance of rain</p>

              <p>Last update: timestamp</p>
            </div>

            <div>
              <h3>5 day Forecast</h3>
            </div>
          </>
        )}
      </section>
    </>
  );
}
