import cn from 'classnames';
import debounce from 'lodash/fp/debounce';
import Head from 'next/head';
import { useMemo } from 'react';
import { useForm } from 'react-hook-form';

import { Results } from '@/components/partial/Results';
import { useApp } from '@/contexts/AppContext';
import { useCityQuery } from '@/hooks/useCityQuery';

export default function Home() {
  const {
    setQuery,
    weather,
    isLoading,
    setIsLoading,
    queryResults,
    setQueryResults,
    appState,
  } = useApp();
  const { findCity } = useCityQuery();
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm();
  const { appDispatch } = useApp();

  const handleQuery = async event => {
    event.preventDefault;
    const { query } = event;
    console.log('1 input value', query);

    appDispatch({ type: 'SUBMITTING' }, { data: query });
    setIsLoading(true);
    setQuery(query);

    try {
      const results = await findCity(query);
      setQueryResults(results);
    } catch (error) {
      appDispatch({ type: 'RESET' });
      // setIsLoading(false);
      setQuery(null);
    }
  };

  // eslint-disable-next-line react-hooks/exhaustive-deps
  const debouncedQuery = useMemo(() => debounce(300, handleQuery));
  const providerName = 'OpenWeatherMap';

  const isProcessing = appState.disabled || appState.submitting;

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <section>
        <header
          className={cn('bg-slate-800/90', {
            'h-screen items-center flex': !weather,
            'py-32': weather,
          })}
        >
          <div className="container">
            <h1 className="mb-5 hs--h1">Mike's Weather</h1>

            <form id="query" onSubmit={handleSubmit(debouncedQuery)}>
              <div className="form-control">
                <div className="input-group">
                  <input
                    type="text"
                    name="query"
                    placeholder="Enter a city"
                    disabled={appState.disabled}
                    {...register('query', { required: true })}
                    // onChange={debounce(300, handleQuery)}
                    className={cn(
                      'w-full max-w-xs input input-bordered text-lg',
                      {
                        'input-disabled': isProcessing,
                      },
                    )}
                  />
                  <button
                    className={cn('btn btn-square', {
                      loading: isProcessing,
                    })}
                    type="submit"
                    onClick={debouncedQuery}
                  >
                    {!isProcessing && (
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="w-6 h-6"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth="2"
                          d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                        />
                      </svg>
                    )}
                  </button>
                </div>
              </div>
            </form>
            <p className="mt-1.5 ml-0.5">
              <small>Powered by {providerName}</small>
            </p>
          </div>
        </header>

        {queryResults && <Results />}

        {weather && (
          <>
            <div className="container">
              <h2 className="hs--h2">Current Weather</h2>

              <p>City, location</p>
              <p>Current conditions</p>
              <p>Chance of rain</p>

              <p>Last update: timestamp</p>
            </div>

            <div>
              <h3>5 day Forecast</h3>
            </div>
          </>
        )}
      </section>
    </>
  );
}
